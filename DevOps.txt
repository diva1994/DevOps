Webinar ID  - 490878723
------------------------------------------
Trainer - Vijay Prabhu
------------------------------------------
https://github.com/vijayprabhu04/wic-devops-mar-22
------------------------------------------

15/3/2022
==========================================
Introduction to DevOps.
IT Firm consist of Development Team & Operations Team.
==========================================

16/3/2022
==========================================
Pre-Requisite for DevOps
------------------------------------------
Tools to be installed
------------------------------------------
Virtual Box
Vagrant  
VS Code
AWS Account
-------------------------------------------
Vagrant Commands
-------------------------------------------
Usage: vagrant [options] <command> [<args>]

    -h, --help                       Print this help.

Common commands:
     autocomplete    manages autocomplete installation on host
     box             manages boxes: installation, removal, etc.
     cloud           manages everything related to Vagrant Cloud
     destroy         stops and deletes all traces of the vagrant machine
     global-status   outputs status Vagrant environments for this user
     halt            stops the vagrant machine
     help            shows the help for a subcommand
     init            initializes a new Vagrant environment by creating a Vagrantfile
     login
     package         packages a running vagrant environment into a box
     plugin          manages plugins: install, uninstall, update, etc.
     port            displays information about guest port mappings
     powershell      connects to machine via powershell remoting
     provision       provisions the vagrant machine
     push            deploys code in this environment to a configured destination
     rdp             connects to machine via RDP
     reload          restarts vagrant machine, loads new Vagrantfile configuration
     resume          resume a suspended vagrant machine
     snapshot        manages snapshots: saving, restoring, etc.
     ssh             connects to machine via SSH
     ssh-config      outputs OpenSSH valid configuration to connect to the machine
     status          outputs status of the vagrant machine
     suspend         suspends the machine
     up              starts and provisions the vagrant environment
     upload          upload to machine via communicator
     validate        validates the Vagrantfile
     version         prints current and latest Vagrant version
     winrm           executes commands on a machine via WinRM
     winrm-config    outputs WinRM configuration to connect to the machine

For help on any individual command run `vagrant COMMAND -h`

Additional subcommands are available, but are either more advanced
or not commonly used. To see all subcommands, run the command
`vagrant list-commands`.
        --[no-]color                 Enable or disable color output
        --machine-readable           Enable machine readable output
    -v, --version                    Display Vagrant version
        --debug                      Enable debug output
        --timestamp                  Enable timestamps on log output
        --debug-timestamp            Enable debug output with timestamps
        --no-tty                     Enable non-interactive output
==========================================


17/3/2022
==========================================
Source Control System Tool
GIT - Linux Torvalds 
Introduction to GIT and Installation 
==========================================


18/3/2022
==========================================
Absent

21/3/2022
=========================================
git Commands
---------------
*git init = Intialisation of git in the folder.
*.git = if we delete we might lose all the data tracking on it.
*git config --global user.email / --global user.name = updating name and email id
*git status =  to know the status of the file whether tracked or not in git.
*git add = it will add the files to tracking mode(Staging).
*git commit -m "message" = to commit the file into the git.  -m - message
*git log = to check the history of git
*git log --oneline = log in oneline
*git restore --staged <file> - to unstage the file
*git checkout commitid = to moving between commits and its in readable mode only we shouldnt make any changes.

22/3/2022
=========================================
*/vagrant is a shared directory = We have to keep all files under this folder as we might lose the data in VM Ware.
*git branch = to check current branch
*Sprint Mode = After sprint meeting ur scrum master will allot the job and duration. Medium, Short & Large time
*Sprint tickets will be created as per work alloted ith help of JIRA tool. Own ticket number.
*git checkout -b <branchname> = To create a branch and to switch for branch
*git checkout master = to switch for branch
*Without merging all the edits will not be avaialble in master
*git branch <nameofbranch> = to create a branch
*git branch -D <branchname> = to delete the branch
*After validating we can merge the branch to master branch
*git checkout <commitid> = git checkout helps in move from commit to another commit
*git-ignore = Its used to hide the sensitive data from others accessing it. Dont want to track newly created file for long period of time. It works only for newly created file after we created .gitignore file.
*we have to create .gitignore file
*we need to add the filename in the .gitingore 
*if we delete the filename from .gitignore we will be able to see
*git reset --soft(Can we reset the commit to master from sprint)

23/3/2022
==========================================
Git Hub
*GitHub Action - We can triggered the code commit action. eg :- to trigger the ansible file
*We need to add the personal token before adding the remote origin. From account setting > Developer Settings > Personal access tokens- we need to create the token here and copy and paste token as password.
*To verify the pushed content to remote repo we can request for compare and change. Ths way is used for Pull request
