Webinar ID  - 490878723
------------------------------------------
Trainer - Vijay Prabhu
------------------------------------------
https://github.com/vijayprabhu04/wic-devops-mar-22
------------------------------------------

15/3/2022
==========================================
Introduction to DevOps.
IT Firm consist of Development Team & Operations Team.
==========================================

16/3/2022
==========================================
Pre-Requisite for DevOps
------------------------------------------
Tools to be installed
------------------------------------------
Virtual Box
Vagrant  
VS Code
AWS Account
-------------------------------------------
Vagrant Commands
-------------------------------------------
Usage: vagrant [options] <command> [<args>]

    -h, --help                       Print this help.

Common commands:
     autocomplete    manages autocomplete installation on host
     box             manages boxes: installation, removal, etc.
     cloud           manages everything related to Vagrant Cloud
     destroy         stops and deletes all traces of the vagrant machine
     global-status   outputs status Vagrant environments for this user
     halt            stops the vagrant machine
     help            shows the help for a subcommand
     init            initializes a new Vagrant environment by creating a Vagrantfile
     login
     package         packages a running vagrant environment into a box
     plugin          manages plugins: install, uninstall, update, etc.
     port            displays information about guest port mappings
     powershell      connects to machine via powershell remoting
     provision       provisions the vagrant machine
     push            deploys code in this environment to a configured destination
     rdp             connects to machine via RDP
     reload          restarts vagrant machine, loads new Vagrantfile configuration
     resume          resume a suspended vagrant machine
     snapshot        manages snapshots: saving, restoring, etc.
     ssh             connects to machine via SSH
     ssh-config      outputs OpenSSH valid configuration to connect to the machine
     status          outputs status of the vagrant machine
     suspend         suspends the machine
     up              starts and provisions the vagrant environment
     upload          upload to machine via communicator
     validate        validates the Vagrantfile
     version         prints current and latest Vagrant version
     winrm           executes commands on a machine via WinRM
     winrm-config    outputs WinRM configuration to connect to the machine

For help on any individual command run `vagrant COMMAND -h`

Additional subcommands are available, but are either more advanced
or not commonly used. To see all subcommands, run the command
`vagrant list-commands`.
        --[no-]color                 Enable or disable color output
        --machine-readable           Enable machine readable output
    -v, --version                    Display Vagrant version
        --debug                      Enable debug output
        --timestamp                  Enable timestamps on log output
        --debug-timestamp            Enable debug output with timestamps
        --no-tty                     Enable non-interactive output
==========================================


17/3/2022
==========================================
Source Control System Tool
GIT - Linux Torvalds 
Introduction to GIT and Installation 
==========================================


18/3/2022
==========================================
Absent

21/3/2022
=========================================
git Commands
---------------
*git init = Intialisation of git in the folder.
*.git = if we delete we might lose all the data tracking on it.
*git config --global user.email / --global user.name = updating name and email id
*git status =  to know the status of the file whether tracked or not in git.
*git add = it will add the files to tracking mode(Staging).
*git commit -m "message" = to commit the file into the git.  -m - message
*git log = to check the history of git
*git log --oneline = log in oneline
*git restore --staged <file> - to unstage the file
*git checkout commitid = to moving between commits and its in readable mode only we shouldnt make any changes.

22/3/2022
=========================================
*/vagrant is a shared directory = We have to keep all files under this folder as we might lose the data in VM Ware.
*git branch = to check current branch
*Sprint Mode = After sprint meeting ur scrum master will allot the job and duration. Medium, Short & Large time
*Sprint tickets will be created as per work alloted ith help of JIRA tool. Own ticket number.
*git checkout -b <branchname> = To create a branch and to switch for branch
*git checkout master = to switch for branch
*Without merging all the edits will not be avaialble in master
*git branch <nameofbranch> = to create a branch
*git branch -D <branchname> = to delete the branch
*After validating we can merge the branch to master branch
*git checkout <commitid> = git checkout helps in move from commit to another commit
*git-ignore = Its used to hide the sensitive data from others accessing it. Dont want to track newly created file for long period of time. It works only for newly created file after we created .gitignore file.
*we have to create .gitignore file
*we need to add the filename in the .gitingore 
*if we delete the filename from .gitignore we will be able to see
*git reset --soft(Can we reset the commit to master from sprint)

23/3/2022
==========================================
Git Hub
*GitHub Action - We can triggered the code commit action. eg :- to trigger the ansible file
*We need to add the personal token before adding the remote origin. From account setting > Developer Settings > Personal access tokens- we need to create the token here and copy and paste token as password.
*To verify the pushed content to remote repo we can request for compare and change. Ths way is used for Pull request
==========================================
24/3/2022
==========================================
Absent

==========================================
25/3/2022
==========================================
*git pull = It helps to keep the local repo updated by remote repo by others
*until we pull the data from remote to local repo we might get error if we trying to commit a file
*git push origin head - to push the the files in the current branch. we should be in the current branch. We do this because branch name might be big and it might be problem to type and push the file.
*git diff main <branch name> =  to see the changes between the files
*git fork allows you to copy the original repo to our github account.
*git clone <url> = git clone allos you to download the entire repo to local repo
*git merge conflict = when 2 people changes the same file in the line so it ceates a conflict.

==========================================
28/3/2022
==========================================
Terraform
------------------------------------------
*See PPT first.
*IAAS - In frastructure As A Service 
*IAC - Infrastructure As Code.
*Terraform is oopen-source infra as a code developed by hashicorp and Language used to define and provision Hashicorp Configuration Language (HCL)
*Terraform helps in automation and Flexible Managing state open-source Auditable and easy to use
*Terraform used to create the Infrastructure (virtuals machine) and not a configuration tool
*Cloud adnostic and Platform agnostic
*Terraform installed e have 2 components Terraform-Plugins (Providers & Provisioners) and Terrafom-Core
*Terraform is written go programming language.
*Terraform configuration files created in plugins and with help of RPC we will communicated with Terraform Core
*Terraform Client Library communicates with cloud providers

==========================================
29/3/2022
==========================================
*How to create AWS Accout free tier account
*How to install terraform with different OS.(Steps in git)
*Terraform code works with hashicorp configuration language (HCL)
*Terraform extention ends ith .tf eg:- main.tf
*file name can be anything but extention should be .tf
*Any program which is created cannot excute the program directly because it cannot directly converted into machine lang so we need to compili the file and convert the prog into machine language (i.e 0,1), Then only we can excute and this program is called non-compiled programming language. eg:-java
*Any program which can directly excute the program without compiling and without  converting is called compiled programming language. eg:-python,golang
*Pre-defined components which is buillt and kept is for ready use eg:-plugins
*Declarative program languages are like scripts or pre-defined components which we need to use and pass the arguements.
*The syntax of HCL :-
#Blocks :- Block is a container for other contents.
eg :- block {
		   arguements_1="value"
		   arguements_2="value"
		 }
#Arguements :- An arguements assigns a value to a particular name 
eg :- arguemnets = "abc123"
   -The identifier before (=) sign is arguement name and after (=) is expression
   -The arguemnts can be String/Number/Bool/list/Map
*Arguements cannot be changed which is pre-defined
-----------------------------------------------------
*Plugins :- The 2 main plugins are providers and provisioners
**Providers :- It are responsible for understanding and take care of the api interaction and expose required resources. eg :- Cloud providers.
eg :- provider "aws" {
			    }

	provider "azurerm" {
			       }

	provider "vsphere" {
			       }

**Resources :- it can anything which is in the providers resources eg storage network. It means infrastructure components.
eg :- Resource "resource_type" "resource_name"{
}

**Using Provisioner you can do changes in instances.
Common uses cases are :
Copying some files to remote servers.
Executing script on newly created instances.
Inject bootstrapping to instances.
Clean up some thing before machine is destroyed 

**Output :- Shows values that are highlighted after terraform applies. This output is also maintained in terraform state file.

**Terraform State :- Terraform state stores status of your managed infrastructure & configuration.
This state is used by Terraform to map real world resources to your configuration, keep track of meta data and to improve performance of large scale infrastructure.
Terraform state is generally stored in a file locally named as “terraform.tfstate”  but it can be also stored elsewhere which can work better in team environment..

** Terraform workflow
Write  : Author your code of how your infrastructure should be.
Plan   : Preview changes before apply 
Apply : Provision your infrastructure.

Q&A :- It can be used on both on premises and cloud provider

==========================================
30/3/2022
==========================================
Terraform
------------------------------------------
1-Example

provider "aws" {
  access_key = 
  secret_key = 
  region     = "ap-south-1"
}

resource "aws_instance" "sample-machine" {
  ami = "ami-0851b76e8b1bce90b"
  instance_type = "t2.micro"
}

Commands
===========================================
*terraform init - intialisation terraform in directory- It nables all dependencie and api's and plugins
*terraform validate - syntax error / checker
*terraform plan - what code is going to do like a blue print
*terraform apply - it will perform the action and also show what this code will do before running.
*terraform destroy - this will destroy the described in your terraform file

**it consider the files which is available in the terraform files and run the file. We ave option as targent where we can mention the file name and run the specific file
** We have to intiate terraform in the directory where our tf file is located
** We have to intiate again if I change the provider in the main file
** It can access only 1 cloud provider in one file not multiple cloud providers
** State file track all the machine information

Q- Does terraform has information about destroyed terraform file
**Terraform can be intialised on empty directory that is without .tf file. 
(Terraform initialized in an empty directory!
The directory has no Terraform configuration files. You may begin working
with Terraform immediately by creating Terraform configuration files.) but we need to create .tf file again we need to initiate it after that provider required plugins will be downloaded to local 

==========================================
31/3/2022
==========================================
*State-File - What infra we have created by terraform file will be stored in the statefile. It will keep the remote state of the infra.
*Modified file will be compared with the terraform.tfstate
*Name of the file terraform.tfstate. It will be json format
*Terraform.tfstate.backup is the previous version of terraform.tfstate
*idempotance - maths term
*It will create only instances mentioned in config file it will be create multiple instance when we apply multiple times as well
*terraform.lock.hcl file . it avoids collusion. preventing from others applying the code
*tags = {Name = "https_server_01"} - for the name of the instance
*To understand the historical changes it will save the the backup and statefile
*terraform.tfstate and terraform.tfstate saves only 1 copy of latest & lastest - 1  and 3 apply will be updated and oldest will be removeds

Example 2 
------------------------------------------
provider "aws" {
    access_key = "xxxxxx"
    secret_key = "xxxxxx"
    region     = "ap-south-1"
}

resource "aws_instance" "ec2_instance" {
    ami = "ami-0c1a7f89451184c8b"
    instance_type = "t2.micro"
    tags = {Name = "HTTPS SERVER-1"}
}

Try with HTTPS SERVER-1 and change name as 2 and 3 see the difference in terraform.tfstate and terraform.tfstate.backup

*Variables
------------------------------------
**We need to declare the varibale and Elements store as an object and can be used in code
**We can store the credentials and which is changing on daily basis
**Types of variable - String , Number , List , Map and Set (It will remove duplicates and assign in chronological abd run)

==========================================
1/4/2022
==========================================
Absent

==========================================
4/4/2022
==========================================
*Variable should start varibale
*We should varibale key word first then name. Inside the blocks we should name the variable as default 
*So default varaible value which can be changed in command / CLI.
*In older version type = string was mentioned as hashi corp was not able to understand the variable by itself now we can call directly without type
*List should covered with square brackets
*Map is coverred with flower brackets
*Terraform console helps us go to into core directly and from there we can run basic command
**Command for the core - terraform console we will be inside the core. To test we need to call the name of the variable

*How to call a variable :- 
** var."the varibale name"
** "${var.varibalename}"
** var.variablename [call_specific_item_in_list]
** var.mymap.specific_key_name

*Spilting the code into multiple file so we can easily debug the file
*We should keep all the supporting files into same folder so we can call the variable without inputting the path
